PART 1:

light weight but no GUI or desktop env but terminal
websites hosted on linux servers
Linux = an umberlla term for mutiple OS, based on UNIX (another OS, free)
Various flavours of Linux with different functions, package managers.
Ubuntu, Debian = some distributions of Linux
Ubuntu server with 512MB RAM is possible
Thin versions for light uses like traffic lights etc...
First at 1991

--- echo [echo SunnyDay, echo "Sunny Day"] = print
--- whoami

Interacting with file systems:
--- ls = list the contents.  [ls, ls folder1]
--- cd = change directory.  [cd folder2, ls, cd..]
--- cat = concatenating. output contents of any file.
--- pwd = print working directory.
ctrl + l = clear
ls, cat difference = cat displays the file content. ls gives info about file, directories.

web, linux dir uses "/"

Searching for files:
instead ls, cd. use find to automate things.
--- find
find -name pswds.txt = know name, location unknown
find -name *.txt = search for all txt files (wildcard=*)
--- grep = search file contents fr ur specific values. good to search in big file.
grep "kali" access.log

Intro to shell operators:
--- & = run cmd in background
--- && = combine 2 cmd in 1 line [ cmd1 && cmd2] 2 runs only if 1 is success
--- > = output redirector. [echo Hey > welcome] = a file welcome created and Hey is stored in it
--- >> = same as >. but append instead replacing. [echo Hello >> welcome] = append Hello to welcome file.

-----------------------------------------------------------------------------------------------------------------------

PART 2:

SSH protool between devices, encrypted form.
execute commands on another device remotely.

SSH to login to your machine:
--- ssh username@ip-address = ssh user at ip-address

Intro to flags and switches:
cmd with arguments...

cmd with arguments. a keyword = flags/ switches. to extend cmd behaviours. hyphen.
--- ls
--- ls -a (or) --all = find hidden files
--- ls --help (or) -h for help

man / manual page for documentation of commands.
--- man ls = view manual pages for ls
see in human readable form: -h (or) --human-readable

Interacting with File system-2:
--- touch = create file = touch note2
--- mkdir = create folder/directory = mkdir folder2
--- cp = copy file/folder = cp note note2 = contents of note copied to note2
--- mv = move file/folder = move, rename a file/ folder = mv note2 note3
--- rm = remove file/folder = rm note2, rm -R folder2 [ -R switch for folder ]
--- file = determine file type = file has extensions = file note3

Permissions 101:
certain users = certain access
actions allowed for file/folder = read, write, execute
--- ls -lh = list permissions of all files in the dir
--- su user2 = switch to user2

Users vs Groups:
regular user vs system user
permissions can be granular

Switching between users:
--- su command
use root permissions through sudo if not root user
read the man page of su to learn more
su -l user = new login session (-l or --login)
su user = current environment.
elevate priviliges with "sudo": sudo su = as root user.

permissions representation:
- rwx rwx rwx
file type
for file owner
for group owner of file
for all other users

Common Directories:
/etc = root directory, stores files used by OS. eg: sudoers file
/var = a root folder, stores frequently accessed data. eg: /var/log = stores log files. go to var, do ls.
/root = home directory for root system user, not /home. data is stored here /home/root
/tmp = root directory, store data needed once or twice. eg: enumeration scripts. go to tmp, do ls.
similar to RAM on computers.
--------------------------------------------------------------------------------------------------------------------

PART3:

Terminal text editors:
Nano:
--- nano myfile = create or edit a file = launches nano
ctrl+X to exit nano [^X Exit]
VIM:
advanced text editor

General or Useful utilities:
--- wget = download files from web = web get
wget https://assets.tryhackme.com/additional/linux-fundamentals/part3/myfile.txt
--- scp = securely transfer files (local to remote host) = secure copy
scp source_file user@host-ip:destination_directory
--- scp = copy files from remote to local
scp user@host-ip:/path/to/source/myfile.txt
--- scp = copy an entire directory recursively
scp -r myfolder/ user@remote-host-ip:/path/to/destination/


Serve files from your host:
Python = HTTPServer module = turns computer into web server
other hosts use [curl, wget] to download it
--- python3 -m  http.server = run from directory which has the files to serve (file eg: myfile)
from another terminal,
--- wget http://ip-address:port-number/myfile
disadvantage = no indexing. remember name, loc of file.
updog = more better light weight web server.
after using wget, ls, ls -l, ls -a, cat myfile, see the contents.
ctrl + c to stop the python made server

Processes 101:
programs running on machine = processes
managed by kernel with process ID's
--- ps = view running processes in current user's session
--- ps aux = see running process from 
--- top = insigts to running processes
--- kill = kill a command by providing it's PID
SIGTERM = clean kill
SIGKILL = unclean kill
SIGSTOP = stop or suspend a process.

OS = split resources with namespaces. Splitting system.
to isolate processes for another. access to certain amount of computing power.
PID 0 started when system boots = system's init like systemd.

Launch manually/ Launch on boot
--- systemctl = interact with systemd process/ daemon.
systemctl [option] [service]
option = start, stop, enable, disable
eg: systemctl start apache2
enable = start service on bootup of system

process run in 2 states: background or foreground
echo "Keer" = gives output
echo "Keer" & = gives ID
good use when copying files. Let it run, do other processes.
ctrl + z to background a process.
confirm the background process with (ps aux)
--- fg = bring process to foreground

locate processes, find the flag?

Maintaining your system: automation:
schedule some tasks to run after system booted.
crontabs = a process, started during boot. manages cron jobs.


















